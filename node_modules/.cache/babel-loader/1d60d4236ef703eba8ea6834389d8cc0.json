{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brick Lane\\\\Documents\\\\UNISWAP stuff\\\\uniswap-interface-integration\\\\uniswap-demo\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { ApolloClient } from '@apollo/client';\nimport { InMemoryCache } from '@apollo/client';\nimport { HttpLink } from 'apollo-link-http';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\n  }),\n  fetchOptions: {\n    mode: 'no-cors'\n  },\n  cache: new InMemoryCache()\n});\nconst DAI_QUERY = gql`\n  query tokens ($tokenAddress: Bytes!) {\n    tokens(where: { id: $tokenAddress ) {\n      derivedETH\n      totalValueLocked\n    }\n  }\n`;\nconst ETH_PRICE_QUERY = gql`\n  query bundles {\n    bundles(where: { id: \"1\" }) {\n      ethPriceUSD\n    }\n  }\n`;\n\nfunction App() {\n  _s();\n\n  const {\n    loading: ethLoading,\n    error,\n    data: ethPriceData\n  } = useQuery(ETH_PRICE_QUERY);\n  const {\n    loading: daiLoading,\n    error: daiError,\n    data: daiData\n  } = useQuery(DAI_QUERY, {\n    variables: {\n      tokenAddress: '0x6b175474e89094c44da98b954eedeac495271d0f'\n    }\n  });\n  const daiPriceInEth = daiData && daiData.tokens[0].derivedETH;\n  const daiTotalLiquidity = daiData && daiData.tokens[0].totalValueLocked;\n  const ethPriceInUSD = ethPriceData && ethPriceData.bundles[0].ethPriceUSD;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Dai price:\", ' ', ethLoading || daiLoading ? 'Loading token data...' : '$' + // parse responses as floats and fix to 2 decimals\n      (parseFloat(daiPriceInEth) * parseFloat(ethPriceInUSD)).toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Dai total liquidity:\", ' ', daiLoading ? 'Loading token data...' : // display the total amount of DAI spread across all pools\n      parseFloat(daiTotalLiquidity).toFixed(0)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"02+WYAPEX4doitFP6phCPa42qAw=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Brick Lane/Documents/UNISWAP stuff/uniswap-interface-integration/uniswap-demo/src/App.js"],"names":["React","useEffect","ApolloClient","InMemoryCache","HttpLink","useQuery","gql","client","link","uri","fetchOptions","mode","cache","DAI_QUERY","ETH_PRICE_QUERY","App","loading","ethLoading","error","data","ethPriceData","daiLoading","daiError","daiData","variables","tokenAddress","daiPriceInEth","tokens","derivedETH","daiTotalLiquidity","totalValueLocked","ethPriceInUSD","bundles","ethPriceUSD","parseFloat","toFixed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,OAAO,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AACrCM,EAAAA,IAAI,EAAE,IAAIJ,QAAJ,CAAa;AACjBK,IAAAA,GAAG,EAAE;AADY,GAAb,CAD+B;AAIrCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AADM,GAJuB;AAOrCC,EAAAA,KAAK,EAAE,IAAIT,aAAJ;AAP8B,CAAjB,CAAf;AAUP,MAAMU,SAAS,GAAGP,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMQ,eAAe,GAAGR,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANA;;AAUA,SAASS,GAAT,GAAe;AAAA;;AACb,QAAM;AAAEC,IAAAA,OAAO,EAAEC,UAAX;AAAuBC,IAAAA,KAAvB;AAA8BC,IAAAA,IAAI,EAAEC;AAApC,MAAqDf,QAAQ,CAACS,eAAD,CAAnE;AACA,QAAM;AAAEE,IAAAA,OAAO,EAAEK,UAAX;AAAuBH,IAAAA,KAAK,EAAEI,QAA9B;AAAwCH,IAAAA,IAAI,EAAEI;AAA9C,MAA0DlB,QAAQ,CAACQ,SAAD,EAAY;AAClFW,IAAAA,SAAS,EAAE;AACTC,MAAAA,YAAY,EAAE;AADL;AADuE,GAAZ,CAAxE;AAKA,QAAMC,aAAa,GAAGH,OAAO,IAAIA,OAAO,CAACI,MAAR,CAAe,CAAf,EAAkBC,UAAnD;AACA,QAAMC,iBAAiB,GAAGN,OAAO,IAAIA,OAAO,CAACI,MAAR,CAAe,CAAf,EAAkBG,gBAAvD;AACA,QAAMC,aAAa,GAAGX,YAAY,IAAIA,YAAY,CAACY,OAAb,CAAqB,CAArB,EAAwBC,WAA9D;AAEA,sBACE;AAAA,4BACA;AAAA,+BACa,GADb,EAEGhB,UAAU,IAAII,UAAd,GACG,uBADH,GAEG,MACA;AACA,OAACa,UAAU,CAACR,aAAD,CAAV,GAA4BQ,UAAU,CAACH,aAAD,CAAvC,EAAwDI,OAAxD,CAAgE,CAAhE,CANN;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eASA;AAAA,yCACuB,GADvB,EAEGd,UAAU,GACP,uBADO,GAEP;AACAa,MAAAA,UAAU,CAACL,iBAAD,CAAV,CAA8BM,OAA9B,CAAsC,CAAtC,CALN;AAAA;AAAA;AAAA;AAAA;AAAA,YATA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA9BQpB,G;UACoDV,Q,EACKA,Q;;;KAFzDU,G;AAgCT,eAAeA,GAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport './App.css'\nimport { ApolloClient } from '@apollo/client'\nimport { InMemoryCache } from '@apollo/client'\nimport { HttpLink } from 'apollo-link-http'\nimport { useQuery } from '@apollo/client'\nimport gql from 'graphql-tag'\n\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\n  }),\n  fetchOptions: {\n    mode: 'no-cors'\n  },\n  cache: new InMemoryCache()\n})\n\nconst DAI_QUERY = gql`\n  query tokens ($tokenAddress: Bytes!) {\n    tokens(where: { id: $tokenAddress ) {\n      derivedETH\n      totalValueLocked\n    }\n  }\n`\n\nconst ETH_PRICE_QUERY = gql`\n  query bundles {\n    bundles(where: { id: \"1\" }) {\n      ethPriceUSD\n    }\n  }\n`\n\n\n\nfunction App() {\n  const { loading: ethLoading, error, data: ethPriceData } = useQuery(ETH_PRICE_QUERY)\n  const { loading: daiLoading, error: daiError, data: daiData } = useQuery(DAI_QUERY, {\n    variables: {\n      tokenAddress: '0x6b175474e89094c44da98b954eedeac495271d0f'\n    }\n  })\n  const daiPriceInEth = daiData && daiData.tokens[0].derivedETH\n  const daiTotalLiquidity = daiData && daiData.tokens[0].totalValueLocked\n  const ethPriceInUSD = ethPriceData && ethPriceData.bundles[0].ethPriceUSD\n\n  return (\n    <div>\n    <div>\n      Dai price:{' '}\n      {ethLoading || daiLoading\n        ? 'Loading token data...'\n        : '$' +\n          // parse responses as floats and fix to 2 decimals\n          (parseFloat(daiPriceInEth) * parseFloat(ethPriceInUSD)).toFixed(2)}\n    </div>\n    <div>\n      Dai total liquidity:{' '}\n      {daiLoading\n        ? 'Loading token data...'\n        : // display the total amount of DAI spread across all pools\n          parseFloat(daiTotalLiquidity).toFixed(0)}\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}